// Generated by Dagger (https://dagger.dev).
package ata.unit.three.project.expense.service;

import ata.unit.three.project.expense.dynamodb.ExpenseServiceRepository;
import ata.unit.three.project.expense.service.model.ExpenseItemConverter;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ExpenseService_Factory implements Factory<ExpenseService> {
  private final Provider<ExpenseServiceRepository> expenseServiceRepositoryProvider;

  private final Provider<ExpenseItemConverter> expenseItemConverterProvider;

  public ExpenseService_Factory(Provider<ExpenseServiceRepository> expenseServiceRepositoryProvider,
      Provider<ExpenseItemConverter> expenseItemConverterProvider) {
    this.expenseServiceRepositoryProvider = expenseServiceRepositoryProvider;
    this.expenseItemConverterProvider = expenseItemConverterProvider;
  }

  @Override
  public ExpenseService get() {
    return newInstance(expenseServiceRepositoryProvider.get(), expenseItemConverterProvider.get());
  }

  public static ExpenseService_Factory create(
      Provider<ExpenseServiceRepository> expenseServiceRepositoryProvider,
      Provider<ExpenseItemConverter> expenseItemConverterProvider) {
    return new ExpenseService_Factory(expenseServiceRepositoryProvider, expenseItemConverterProvider);
  }

  public static ExpenseService newInstance(ExpenseServiceRepository expenseServiceRepository,
      ExpenseItemConverter expenseItemConverter) {
    return new ExpenseService(expenseServiceRepository, expenseItemConverter);
  }
}
